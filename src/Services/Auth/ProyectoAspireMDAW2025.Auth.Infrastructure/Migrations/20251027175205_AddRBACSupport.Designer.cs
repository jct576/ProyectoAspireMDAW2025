// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProyectoAspireMDAW2025.Auth.Infrastructure.Data;

#nullable disable

namespace ProyectoAspireMDAW2025.Auth.Infrastructure.Migrations
{
    [DbContext(typeof(AuthDbContext))]
    [Migration("20251027175205_AddRBACSupport")]
    partial class AddRBACSupport
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("ProyectoAspireMDAW2025.Auth.Domain.Entities.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            ConcurrencyStamp = "admin-seed-stamp-001",
                            CreatedAt = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Administrador del sistema con acceso completo a todas las funcionalidades",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            ConcurrencyStamp = "manager-seed-stamp-002",
                            CreatedAt = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Gestor con permisos para administrar usuarios y contenido",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            ConcurrencyStamp = "user-seed-stamp-003",
                            CreatedAt = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Usuario estándar con permisos básicos",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            ConcurrencyStamp = "guest-seed-stamp-004",
                            CreatedAt = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Invitado con permisos de solo lectura limitados",
                            Name = "Guest",
                            NormalizedName = "GUEST"
                        });
                });

            modelBuilder.Entity("ProyectoAspireMDAW2025.Auth.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[IsDeleted] = 0");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("Status");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[IsDeleted] = 0");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("ProyectoAspireMDAW2025.Auth.Domain.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000001"),
                            Category = "Users",
                            CreatedAt = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Ver todos los usuarios del sistema",
                            Name = "users.read"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000002"),
                            Category = "Users",
                            CreatedAt = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Ver solo el propio perfil del usuario",
                            Name = "users.read.own"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000003"),
                            Category = "Users",
                            CreatedAt = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Crear y actualizar cualquier usuario",
                            Name = "users.write"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000004"),
                            Category = "Users",
                            CreatedAt = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Actualizar solo el propio perfil del usuario",
                            Name = "users.write.own"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000005"),
                            Category = "Users",
                            CreatedAt = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Realizar soft delete de usuarios",
                            Name = "users.delete"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000006"),
                            Category = "Users",
                            CreatedAt = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Realizar hard delete (eliminación permanente) de usuarios",
                            Name = "users.delete.permanent"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000007"),
                            Category = "Users",
                            CreatedAt = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Restaurar usuarios eliminados (soft delete)",
                            Name = "users.restore"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000001"),
                            Category = "Roles",
                            CreatedAt = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Ver todos los roles del sistema",
                            Name = "roles.read"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000002"),
                            Category = "Roles",
                            CreatedAt = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Crear, actualizar y eliminar roles",
                            Name = "roles.manage"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000003"),
                            Category = "Roles",
                            CreatedAt = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Asignar cualquier rol a usuarios",
                            Name = "roles.assign"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000004"),
                            Category = "Roles",
                            CreatedAt = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Asignar solo el rol 'User' a usuarios",
                            Name = "roles.assign.user"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000001"),
                            Category = "Permissions",
                            CreatedAt = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Ver todos los permisos del sistema",
                            Name = "permissions.read"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000002"),
                            Category = "Permissions",
                            CreatedAt = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Gestionar permisos (asignar/remover de roles)",
                            Name = "permissions.manage"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000001"),
                            Category = "Audit",
                            CreatedAt = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Ver auditoría limitada (solo eventos propios o de su equipo)",
                            Name = "audit.read"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000002"),
                            Category = "Audit",
                            CreatedAt = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Ver toda la auditoría del sistema",
                            Name = "audit.read.all"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000003"),
                            Category = "Audit",
                            CreatedAt = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Exportar auditoría",
                            Name = "audit.export"
                        },
                        new
                        {
                            Id = new Guid("50000000-0000-0000-0000-000000000001"),
                            Category = "Notifications",
                            CreatedAt = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Enviar notificaciones",
                            Name = "notifications.send"
                        },
                        new
                        {
                            Id = new Guid("50000000-0000-0000-0000-000000000002"),
                            Category = "Notifications",
                            CreatedAt = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Gestionar configuración de notificaciones",
                            Name = "notifications.manage"
                        });
                });

            modelBuilder.Entity("ProyectoAspireMDAW2025.Auth.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ReplacedByToken")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevokedByIp")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("IsRevoked");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("ProyectoAspireMDAW2025.Auth.Domain.Entities.RolePermission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("GrantedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("00000000-0000-0000-0000-000000000001"),
                            PermissionId = new Guid("10000000-0000-0000-0000-000000000001"),
                            GrantedAt = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            RoleId = new Guid("00000000-0000-0000-0000-000000000001"),
                            PermissionId = new Guid("10000000-0000-0000-0000-000000000002"),
                            GrantedAt = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            RoleId = new Guid("00000000-0000-0000-0000-000000000001"),
                            PermissionId = new Guid("10000000-0000-0000-0000-000000000003"),
                            GrantedAt = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            RoleId = new Guid("00000000-0000-0000-0000-000000000001"),
                            PermissionId = new Guid("10000000-0000-0000-0000-000000000004"),
                            GrantedAt = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            RoleId = new Guid("00000000-0000-0000-0000-000000000001"),
                            PermissionId = new Guid("10000000-0000-0000-0000-000000000005"),
                            GrantedAt = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            RoleId = new Guid("00000000-0000-0000-0000-000000000001"),
                            PermissionId = new Guid("10000000-0000-0000-0000-000000000006"),
                            GrantedAt = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            RoleId = new Guid("00000000-0000-0000-0000-000000000001"),
                            PermissionId = new Guid("10000000-0000-0000-0000-000000000007"),
                            GrantedAt = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            RoleId = new Guid("00000000-0000-0000-0000-000000000001"),
                            PermissionId = new Guid("20000000-0000-0000-0000-000000000001"),
                            GrantedAt = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            RoleId = new Guid("00000000-0000-0000-0000-000000000001"),
                            PermissionId = new Guid("20000000-0000-0000-0000-000000000002"),
                            GrantedAt = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            RoleId = new Guid("00000000-0000-0000-0000-000000000001"),
                            PermissionId = new Guid("20000000-0000-0000-0000-000000000003"),
                            GrantedAt = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            RoleId = new Guid("00000000-0000-0000-0000-000000000001"),
                            PermissionId = new Guid("20000000-0000-0000-0000-000000000004"),
                            GrantedAt = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            RoleId = new Guid("00000000-0000-0000-0000-000000000001"),
                            PermissionId = new Guid("30000000-0000-0000-0000-000000000001"),
                            GrantedAt = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            RoleId = new Guid("00000000-0000-0000-0000-000000000001"),
                            PermissionId = new Guid("30000000-0000-0000-0000-000000000002"),
                            GrantedAt = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            RoleId = new Guid("00000000-0000-0000-0000-000000000001"),
                            PermissionId = new Guid("40000000-0000-0000-0000-000000000001"),
                            GrantedAt = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            RoleId = new Guid("00000000-0000-0000-0000-000000000001"),
                            PermissionId = new Guid("40000000-0000-0000-0000-000000000002"),
                            GrantedAt = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            RoleId = new Guid("00000000-0000-0000-0000-000000000001"),
                            PermissionId = new Guid("40000000-0000-0000-0000-000000000003"),
                            GrantedAt = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            RoleId = new Guid("00000000-0000-0000-0000-000000000001"),
                            PermissionId = new Guid("50000000-0000-0000-0000-000000000001"),
                            GrantedAt = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            RoleId = new Guid("00000000-0000-0000-0000-000000000001"),
                            PermissionId = new Guid("50000000-0000-0000-0000-000000000002"),
                            GrantedAt = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002"),
                            PermissionId = new Guid("10000000-0000-0000-0000-000000000001"),
                            GrantedAt = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002"),
                            PermissionId = new Guid("10000000-0000-0000-0000-000000000002"),
                            GrantedAt = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002"),
                            PermissionId = new Guid("10000000-0000-0000-0000-000000000003"),
                            GrantedAt = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002"),
                            PermissionId = new Guid("10000000-0000-0000-0000-000000000004"),
                            GrantedAt = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002"),
                            PermissionId = new Guid("20000000-0000-0000-0000-000000000001"),
                            GrantedAt = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002"),
                            PermissionId = new Guid("20000000-0000-0000-0000-000000000004"),
                            GrantedAt = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002"),
                            PermissionId = new Guid("30000000-0000-0000-0000-000000000001"),
                            GrantedAt = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002"),
                            PermissionId = new Guid("40000000-0000-0000-0000-000000000001"),
                            GrantedAt = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002"),
                            PermissionId = new Guid("40000000-0000-0000-0000-000000000003"),
                            GrantedAt = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002"),
                            PermissionId = new Guid("50000000-0000-0000-0000-000000000001"),
                            GrantedAt = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            RoleId = new Guid("00000000-0000-0000-0000-000000000003"),
                            PermissionId = new Guid("10000000-0000-0000-0000-000000000002"),
                            GrantedAt = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            RoleId = new Guid("00000000-0000-0000-0000-000000000003"),
                            PermissionId = new Guid("10000000-0000-0000-0000-000000000004"),
                            GrantedAt = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            RoleId = new Guid("00000000-0000-0000-0000-000000000004"),
                            PermissionId = new Guid("10000000-0000-0000-0000-000000000002"),
                            GrantedAt = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("ProyectoAspireMDAW2025.Auth.Domain.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ProyectoAspireMDAW2025.Auth.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ProyectoAspireMDAW2025.Auth.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("ProyectoAspireMDAW2025.Auth.Domain.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProyectoAspireMDAW2025.Auth.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ProyectoAspireMDAW2025.Auth.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProyectoAspireMDAW2025.Auth.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("ProyectoAspireMDAW2025.Auth.Domain.Entities.ApplicationUser", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProyectoAspireMDAW2025.Auth.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("ProyectoAspireMDAW2025.Auth.Domain.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProyectoAspireMDAW2025.Auth.Domain.Entities.ApplicationRole", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ProyectoAspireMDAW2025.Auth.Domain.Entities.ApplicationRole", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("ProyectoAspireMDAW2025.Auth.Domain.Entities.ApplicationUser", b =>
                {
                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("ProyectoAspireMDAW2025.Auth.Domain.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
